import { processHtmlAttributes } from "../../common/html-attributes";
import type { WithNormalizedProps } from "../../global";
export type CardLayout = "horizontal" | "vertical";
export type AspectRatio = "16:9" | "5:4" | "default";
export interface CardElement extends Omit<Marko.HTML.P, `on${string}`> {
    as?: string;
}
export interface CardOverlineElement extends Omit<Marko.HTML.P, `on${string}`> {
    text?: string;
}
export interface CardInput extends Omit<Marko.HTML.Div, "title" | `on${string}`> {
    layout?: CardLayout;
    aspectRatio?: AspectRatio;
    overline?: Marko.AttrTag<CardOverlineElement>;
    title?: Marko.AttrTag<CardElement>;
    description?: Marko.AttrTag<CardElement>;
    disabled?: boolean;
    action?: Marko.AttrTag<CardElement>;
    href?: string;
    image: Marko.AttrTag<Marko.HTML.Img>;
    "on-click"?: (event: MouseEvent) => void;
}
export interface Input extends WithNormalizedProps<CardInput> {}
class {}
$ const {
    class: inputClass,
    layout,
    href,
    aspectRatio,
    image,
    overline,
    title,
    disabled,
    description,
    action,
    ...htmlInput
} = input;
$ const elem = !action ? (href ? "a" : "button") : "span";

<${elem}
    class=[
        "card",
        aspectRatio === "5:4" && "card--aspect-5-4",
        aspectRatio === "16:9" && "card--aspect-16-9",
        layout === "horizontal" && "card--horizontal",
        inputClass,
    ]
    disabled=elem === "button" && disabled
    on-click(!disabled && "emit", "click")
    type=elem === "button" && "button"
    href=elem === "a" && (disabled ? "" : href)
    tabindex=disabled && -1
    ...processHtmlAttributes(htmlInput)
>
    <div class="card__media">
        <img ...processHtmlAttributes(image)>
    </div>
    <div class="card__main">
        <if(overline)>
            <div
                class="card__overline"
                ...processHtmlAttributes(overline)
            >
                <${overline}/>
            </div>
        </if>

        <if(title)>
            <${title.as || "h3"}
                class="card__title"
                ...processHtmlAttributes(title, ["as"])
            >
                <${title}/>
            </>
        </if>
        <if(description)>
            <div
                class="card__description"
                ...processHtmlAttributes(description)
            >
                <${description}/>
            </div>
        </if>
        <if(action)>
            <div class="card__action" ...processHtmlAttributes(action)>
                <${action}/>
            </div>
        </if>
    </div>
</>
